pip install Flask
from flask import Flask, render_template, request, redirect
import sqlite3
import string
import random
app = Flask(__name__)

# function to generate a random alias for the short URL
def generate_alias():
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

# initialize the database
def create_table():
    conn = sqlite3.connect('url_shortener.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS urls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            long_url TEXT NOT NULL,
            short_alias TEXT NOT NULL UNIQUE,
            clicks INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# route to the home page
@app.route('/')
def index():
    return render_template('index.html')

# route to handle shortening a URL
@app.route('/shorten', methods=['POST'])
def shorten():
    long_url = request.form['long_url']
    custom_alias = request.form['custom_alias']

    # check if the custom alias is available
    if not custom_alias:
        custom_alias = generate_alias()

    conn = sqlite3.connect('url_shortener.db')
    cursor = conn.cursor()

    # insert the URL into the database
    cursor.execute('INSERT INTO urls (long_url, short_alias) VALUES (?, ?)', (long_url, custom_alias))
    conn.commit()
    conn.close()

    return render_template('result.html', short_url=f'http://yourdomain.com/{custom_alias}')

# route to handle accessing a short URL
@app.route('/<short_alias>')
def redirect_to_original(short_alias):
    conn = sqlite3.connect('url_shortener.db')
    cursor = conn.cursor()

    # retrieve the original URL from the database
    cursor.execute('SELECT long_url FROM urls WHERE short_alias = ?', (short_alias,))
    result = cursor.fetchone()

    # If the alias is found, redirect to the original URL; otherwise, return a 404 error
    if result:
        conn.close()
        return redirect(result[0])
    else:
        conn.close()
        return "URL not found", 404

if __name__ == '__main__':
    create_table()
    app.run(debug=True)